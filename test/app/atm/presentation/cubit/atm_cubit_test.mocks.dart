// Mocks generated by Mockito 5.3.2 from annotations
// in atm_simulator/test/app/atm/presentation/cubit/atm_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:atm_simulator/app/atm/domain/entity/atm.dart' as _i6;
import 'package:atm_simulator/app/atm/domain/repository/atm_repository.dart'
    as _i2;
import 'package:atm_simulator/app/atm/domain/use_case/check_balance.dart'
    as _i10;
import 'package:atm_simulator/app/atm/domain/use_case/clear_commands.dart'
    as _i15;
import 'package:atm_simulator/app/atm/domain/use_case/deposit.dart' as _i11;
import 'package:atm_simulator/app/atm/domain/use_case/log_in.dart' as _i4;
import 'package:atm_simulator/app/atm/domain/use_case/log_out.dart' as _i9;
import 'package:atm_simulator/app/atm/domain/use_case/show_help.dart' as _i14;
import 'package:atm_simulator/app/atm/domain/use_case/transfer.dart' as _i13;
import 'package:atm_simulator/app/atm/domain/use_case/withdraw.dart' as _i12;
import 'package:atm_simulator/core/exception/app_exception.dart' as _i7;
import 'package:atm_simulator/core/use_case/use_case.dart' as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAtmRepository_0 extends _i1.SmartFake implements _i2.AtmRepository {
  _FakeAtmRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LogIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogIn extends _i1.Mock implements _i4.LogIn {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}

/// A class which mocks [LogOut].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOut extends _i1.Mock implements _i9.LogOut {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}

/// A class which mocks [CheckBalance].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckBalance extends _i1.Mock implements _i10.CheckBalance {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}

/// A class which mocks [Deposit].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeposit extends _i1.Mock implements _i11.Deposit {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}

/// A class which mocks [Withdraw].
///
/// See the documentation for Mockito's code generation for more information.
class MockWithdraw extends _i1.Mock implements _i12.Withdraw {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}

/// A class which mocks [Transfer].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransfer extends _i1.Mock implements _i13.Transfer {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}

/// A class which mocks [ShowHelp].
///
/// See the documentation for Mockito's code generation for more information.
class MockShowHelp extends _i1.Mock implements _i14.ShowHelp {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}

/// A class which mocks [ClearCommands].
///
/// See the documentation for Mockito's code generation for more information.
class MockClearCommands extends _i1.Mock implements _i15.ClearCommands {
  @override
  _i2.AtmRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAtmRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AtmRepository);
  @override
  _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>> call(
          _i8.AtmParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
            _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>.value(
                _FakeEither_1<_i6.Atm, _i7.AppException>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Atm, _i7.AppException>>);
}
